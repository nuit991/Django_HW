分成 個部分
前端
views.py渲染
urls.py引導
搜尋 pagination_search
結果 pagination_result

-------------
後端
爬蟲程式 data_scraper
異步處理 consumers
路由 routing

-------------
-------------
前端處理

1.處理views.py + urls.py
views.py 網頁渲然的東西
urls.py 引導
EX: (主頁，127.0.0.1)
def index(request):
    return render(request, 'index.html')

urls.py讀到views.py的def index(request)就會把網頁引導到對應的畫面
urlpatterns = [
    # ''是空字符串，代表网站的根路径，長這樣http://127.0.0.1:8000/
    path('', views.index, name = 'index'),  # 這個是你的首頁

    ]

-------------
2.依照本專案


搜尋頁面:
def pagination_search(request):
    return render(request, 'pagination_search.html')

結果頁面:
A.這邊只要顯示出畫面就好(EX:佈好的分類)，結果會從異步進來
B.在搜尋頁面拿到的資料 (EX:3家的商品名稱跟頁數)會丟給結果頁面，結果再丟到後端給異步處理
C.這裡必須注意，使用的名稱要統一(EX:'product_name_pchome' / 'pchome_max_pages'，前端到後端，不然有問題要找很麻煩)
def pagination_result(request):
    if request.method == 'POST':
        print(request.POST)
        product_name_pchome = request.POST.get('product_name_pchome')
        pchome_max_pages = int(request.POST.get('pchome_max_pages', 5))
        print(product_name_pchome)
        print(pchome_max_pages)

        product_name_momo = request.POST.get('product_name_momo')
        momo_max_pages = int(request.POST.get('momo_max_pages', 5))
        print(product_name_momo)
        print(momo_max_pages)

        product_name_yahoo = request.POST.get('product_name_yahoo')
        yahoo_max_pages = int(request.POST.get('yahoo_max_pages', 5))
        print(product_name_yahoo)
        print(yahoo_max_pages)

        context = {
                'product_name_pchome': product_name_pchome,
                'pchome_max_pages': pchome_max_pages,

                'product_name_momo': product_name_momo,
                'momo_max_pages': momo_max_pages,

                'product_name_yahoo': product_name_yahoo,
                'yahoo_max_pages': yahoo_max_pages,
                }

        return render(request, 'pagination_result.html', context)

-------------
3.urls.py 引導
A.這邊會匯入views.py的設定


from django.urls import path
#from .views import home, gym_data_api, index, buy_page, search_pchome_product_view, search_form_pchome,search_momo_product_view, search_form_momo
from . import views #直接匯入views.py比較快

urlpatterns = [
    path('pagination_search/', views.pagination_search, name='pagination_search'),
    path('pagination_result/', views.pagination_result, name='pagination_result'),
]
a.''是空字符串 : 主頁 127.0.0.1/
b.'pagination_search/' : 查看分頁示例 
c.'pagination_result/' : 分頁顯示


-------------
-------------
後端處理

搜尋頁面輸入完資料後會把東西丟給結果頁面
結果頁面會先跑出基本佈局，跑到JS的部分後開始處理JS

拿到的資料 (3家的商品名稱 / 3家的頁數)

1.前端的 WebSocket打開之後把東西丟給 consumer_XXX.py (3家的會一起丟)
2.各個consumer_XXX.py會再呼叫data_scraper_buy_XXX.py後端爬蟲程式
3.完成之後data_scraper_buy_XXX.py再把結果丟回去consumer_XXX.py
4.consumer_XXX.py會再把結果丟回到pagination_result.html

因為使用異步處理，所以抓一筆就會丟一筆，不會等到所有東西抓完才顯示結果

-------------
WebSocket處理:
A.當程式跑到const socket = new WebSocket(`ws://${window.location.host.replace(':8000', ':9000')}/ws/${target}/`);
PS: 
這邊.replace(':8000', ':9000')是因為 8000給Django，所以daphne改成9000來啟動
啟動指令 daphne -p 9000 Project_1.asgi:application

會啟動WebSocket(這邊僅確認連接)，這邊會依照routing.py所設定，分別呼叫對應的consumers_XXX.py

-------------
B.然後跑到socket.onopen，當WebSocket連接成功就會開啟
這邊開始就會傳送3個東西
1.command: 'start'
2.[`product_name_${target}`]: productName  (商品名稱)
3.[`${target}_max_pages`]: maxPages (要搜索的頁數)

-------------
C.然後開始執行loading圖案程式 ， const loadingElement = document.getElementById(`loading-${target}`);
1.基本上就是在抓資料的過程跑loading圖案，做一個確認程式有再執行的判斷

-------------
D.然後跑到consumers_XXX.py

a.async def connect(self) 
開啟連接

b.async def disconnect(self, close_code) 
斷開處理

c.async def receive(self, text_data)
接收，因為前端有丟東西過來(商品名稱/頁數)所以要加這個

d.async def send_product_data(self, product_name, max_pages) 
receive收到的資料會丟到這邊，然後呼叫 scrape_XXX_product(product_name, max_pages)，丟給爬蟲程式

e.爬完之後再丟回來到consumers_XXX.py，consumers_XXX.py會再丟到pagination_result.html給socket.onmessage = event =>，socket.onmessage = event =>會把結果呈現到網頁上

f.等到後端爬蟲結束會丟一個await self.send(text_data=json.dumps({'status': 'completed'}))給socket.onmessage = event => 
等socket.onmessage = event =>拿到之後會停止WebSocket的連接，然後也停止loading的圖案
最後socket.onclose = event => 會顯示一個完成的視窗


-------------
-------------
顯示跟清除處理








